#include <stdint.h>
#ifndef _INITIAL_IC_H
#define _INITIAL_IC_H 1
enum mode_t
{


};

 extern "C"{
   void configure_sysclock();
  void Sys_Tick_config(); // настройка sys_tick таймера зависит от настроек
		// системной сонфигурации
  void Sys_Tick_value(uint32_t val);//uint32_t val);
  void Sys_Tick_start();


  // конфигурация TIM2
   void Tim2_configure();
   void Tim2_value(uint16_t);
// TIM_TypeDef ;
   void Tim_start(void *v);

 void PWM_Tim2_config();
 void PWM_Tim2_cfg();
void PWM_update(int a);
 void alter_func(uint32_t* reg, uint8_t pos,mode_t mode); // принимает адресс регистра, и номер вывода /*и режим*/

// датчик ультразвуковой HC-SR04
 //
  // 1. подать импульс на вход trig продолжительностью 10 мкс
 // 2. датчик сгенерирует 8 импульсов частотой 40кГц, (25 мкс)
 // 3. По спаду последнего импульса на выход ECHO будет выставлена логисеская единица, (начнется отсчет ожидания возврата)
 // 4. После получения последнего отраженного импульса (8-й волны), на Echo подается ноль
 // Если возврата нет в течение 38 мс, то считается что ответа нет, на эхо также подается 0
 // Задача контроллера сводится к генерированию импульса 10 мкс (таймер), и подсчету времени
 // высокого уровня на выходе echo,
 // Для этого нужно сконфигурировать пин на вход, и посчитать время
 //
  void TIM_config(); // конфигурация таймера для генерирования одиночного импульса 10мкс

  void count_delay_config(); // настройка порта на задержку при выставленном эхе
  void count_delay();
  void set_impulse(uint16_t imp);/*
   логика работы включаем канал, и в регистр сравнения добавляем TIM->CNT+ impulse, в прерывании отключаем прервания канала, и выход

   */

  // как посчитать задержку 38 мс, нужен таймер?
  // по переполнению;
  // какая то переменная для подсчета количества прерываний tim2_cnt
  // таким образом, при получении hi_lewel на echo. сохранить tim2_cnt и TIM2->CNT
  // после получения низкого уровня подсчитать количество прерываний



  void config_usart1();
 }

#endif
